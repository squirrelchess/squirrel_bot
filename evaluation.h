
#ifndef EVALUATION_H
#define EVALUATION_H

#include "types.h"

int static_eval();

constexpr int piece_weight_table[KING + 1] = { 0, 0, 100, 300, 300, 500, 900, 1500 };

constexpr int piece_weight(PieceType pt) { return piece_weight_table[pt]; }

constexpr int square_score_table[PIECE_TYPE_NB][SQUARE_NB] = 
{
// scored from black's pov (promotion = 0-7) with a maximizer perspective (retarded)
  { // pawn
    50, 50, 50, 50, 50, 50, 50, 50,
    50, 50, 50, 50, 50, 50, 50, 50,
    10, 10, 20, 30, 30, 20, 10, 10,
    5,  5, 10, 25, 25, 10,  5,  5,
    0,  0,  0, 20, 20,  0,  0,  0,
    5, -5,-10,  0,  0,-10, -5,  5,
    5, 10, 10,-20,-20, 10, 10,  5,
    0,  0,  0,  0,  0,  0,  0,  0
  },
  { // knight
    -50,-40,-30,-30,-30,-30,-40,-50,
    -40,-20,  0,  0,  0,  0,-20,-40,
    -30,  0, 10, 15, 15, 10,  0,-30,
    -30,  5, 15, 20, 20, 15,  5,-30,
    -30,  0, 15, 20, 20, 15,  0,-30,
    -30,  5, 10, 15, 15, 10,  5,-30,
    -40,-20,  0,  5,  5,  0,-20,-40,
    -50,-40,-30,-30,-30,-30,-40,-50,
  },
  { // bishop
    -20,-10,-10,-10,-10,-10,-10,-20,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -10,  0,  5, 10, 10,  5,  0,-10,
    -10,  5,  5, 10, 10,  5,  5,-10,
    -10,  0, 10, 10, 10, 10,  0,-10,
    -10, 10, 10, 10, 10, 10, 10,-10,
    -10,  5,  0,  0,  0,  0,  5,-10,
    -20,-10,-10,-10,-10,-10,-10,-20,
  },
  { // rook
    0,  0,  0,  0,  0,  0,  0,  0,
    5, 10, 10, 10, 10, 10, 10,  5,
    -5,  0,  0,  0,  0,  0,  0, -5,
    -5,  0,  0,  0,  0,  0,  0, -5,
    -5,  0,  0,  0,  0,  0,  0, -5,
    -5,  0,  0,  0,  0,  0,  0, -5,
    -5,  0,  0,  0,  0,  0,  0, -5,
    -5,  0,  0,  5,  5,  0,  0, -5
  },
  { // queen
    -20,-10,-10, -5, -5,-10,-10,-20,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -10,  0,  5,  5,  5,  5,  0,-10,
    -5,  0,  5,  5,  5,  5,  0, -5,
    0,  0,  5,  5,  5,  5,  0, -5,
    -10,  5,  5,  5,  5,  5,  0,-10,
    -10,  0,  5,  0,  0,  0,  0,-10,
    -20,-10,-10, -5, -5,-10,-10,-20
  },
  { // king
    -6,-8,-8,-10,-10,-8,-8,-6,
    -6,-8,-8,-10,-10,-8,-8,-6,
    -6,-8,-8,-10,-10,-8,-8,-6,
    -6,-8,-8,-10,-10,-8,-8,-6,
    -4,-6,-6,-8, -8, -6,-6,-4,
    -2,-4,-4,-4, -4, -4,-4,-2,
    -2,-2,-1,-1, -1, -1,-2,-2,
    0, 0, 0, 0,  0,  0, 0, 0,
  }
};

template<Color Perspective>
constexpr int square_score(PieceType pt, Square sq) {
  if constexpr (Perspective == WHITE)
    return square_score_table[pt - 2][sq ^ 63];
  else
    return square_score_table[pt - 2][sq];
}

constexpr int end_king_squares[] = {
  -10,-8,-6,-4,-4,-6,-8,-10,
  -6, -4,-2, 0, 0,-2,-4,-6,
  -6, -2, 4, 6, 6, 4,-2,-6,
  -6, -2, 6, 8, 8, 6,-2,-6,
  -6, -2, 6, 8, 8, 6,-2,-6,
  -6, -2, 4, 6, 6, 4,-2,-6,
  -6, -6, 0, 0, 0, 0,-6,-6,
  -10,-6,-6,-6,-6,-6,-6,-10,
};

#endif
